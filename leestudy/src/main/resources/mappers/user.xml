<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.springboot.leestudy.domain.user.UserRepository">
	<!-- 유저-공통사항 insert -->
	<insert id="saveUserCommon" parameterType="com.springboot.leestudy.domain.user.Entity.UserCommon" useGeneratedKeys="true" keyProperty="usercode">
  		insert into user_common 
  		values(
  			0,
  			#{username},
  			#{password}, 
  			#{nickname}, 
  			null, 
  			#{gender}, 
  			#{age}, 
  			#{address_part1}, 
  			#{address_part2}, 
  			1, 
  			#{role}, 
  			now(), 
  			now()
  			)																																																																																																																										
  	</insert>
  	
  	<!-- 유저-학생사항 insert -->
  	<insert id="saveUserStudent" parameterType="com.springboot.leestudy.domain.user.Entity.UserStudent">
  		insert into user_student 
  		values(
  			#{username}, 
  			#{student_email}, 
  			#{student_phonenum}, 
  			#{student_isurgent}, 
  			#{student_student_grade}, 
  			#{student_subject}, 
  			#{student_price}, 
  			#{student_available_time}, 
  			#{student_available_remote}, 
  			#{student_request}
  			)																																																																																																																										
  	</insert>
  	
  	<!-- 유저-선생사항 insert -->
  	<insert id="saveUserTeacher" parameterType="com.springboot.leestudy.domain.user.Entity.UserTeacher">
  		insert into user_teacher 
  		values(
			#{username},
			#{teacher_email}, 
			#{teacher_phonenum},
			#{teacher_introduction},
			#{teacher_university}, 
			#{teacher_university_isgraduate}, 
			#{teacher_university_major}, 
			#{teacher_university_studentnum}, 
			#{teacher_price}, 
			#{teacher_detailprice}, 
			#{teacher_personality}, 
			#{teacher_available_remote}, 
			#{teacher_subject}, 
			#{teacher_available_time}, 
			#{teacher_teaching_detail}, 
			#{teacher_teaching_style}, 
			#{teacher_available_demonstration}
  			)																																																																																																																										
  	</insert>

	<!-- username 으로 UserCommon 조회 -->
  	<select id="findUserCommonByUsername" parameterType="String" resultType="com.springboot.leestudy.domain.user.Entity.UserCommon">
  		select usercode, username, password, nickname, picture, gender, age, address_part1, address_part2, isactive, role, createdate, updatedate
  		from user_common
  		where username = #{username}
  	</select>
  	
  	<!-- username 으로 UserStudent 조회 -->
  	<select id="findUserStudentByUsername" parameterType="String" resultType="com.springboot.leestudy.domain.user.Entity.UserStudent">
  		select 
	  		username, 
	  		student_email, 
	  		student_phonenum, 
	  		student_isurgent, 
	  		student_student_grade, 
	  		student_subject, 
	  		student_price, 
	  		student_available_time, 
	  		student_available_remote, 
	  		student_request
  		from user_student
  		where username = #{username}
  	</select>
  	
  	<!-- username 으로 UserTeacher 조회 -->
  	<select id="findUserTeacherByUsername" parameterType="String" resultType="com.springboot.leestudy.domain.user.Entity.UserTeacher">
  		select 
	  		username, 
	  		teacher_email, 
	  		teacher_phonenum, 
	  		teacher_introduction, 
	  		teacher_university, 
	  		teacher_university_isgraduate, 
	  		teacher_university_major, 
	  		teacher_university_studentnum, 
	  		teacher_price, 
	  		teacher_detailprice,
	  		teacher_personality,
	  		teacher_available_remote,
	  		teacher_subject,
	  		teacher_available_time,
	  		teacher_teaching_detail,
	  		teacher_teaching_style,
	  		teacher_available_demonstration
  		from user_teacher
  		where username = #{username}
  	</select>
  	
  	<!-- checkPassword용 -->
 	<select id="findPasswordByUsername" parameterType="String" resultType="String">
		select password from user_common where username = #{username}
	</select>
	
	<!-- 특정 username을 가진 UserCommon 업데이트 -->
	<update id="updateUserCommonByUsername" parameterType="com.springboot.leestudy.domain.user.Entity.UserCommon">
		update user_common set 
			password=#{password}, 
			nickname=#{nickname}, 
			gender=#{gender}, 
			age=#{age}, 
			address_part1=#{address_part1}, 
			address_part2=#{address_part2}, 
			updatedate=now()
		where username = #{username}
	</update>
	<!-- 특정 username을 가진 UserCommon 업데이트(비밀번호 미변경) -->
	<update id="updateUserCommonByUsernameWithoutPassword" parameterType="com.springboot.leestudy.domain.user.Entity.UserCommon">
		update user_common set 
			nickname=#{nickname}, 
			gender=#{gender}, 
			age=#{age}, 
			address_part1=#{address_part1}, 
			address_part2=#{address_part2}, 
			updatedate=now()
		where username = #{username}
	</update>
	<!-- 특정 username을 가진 UserStudent 업데이트(미변경) -->
	<update id="updateUserStudentByUsername" parameterType="com.springboot.leestudy.domain.user.Entity.UserStudent">
		update user_student set 
			student_email=#{student_email}, 
			student_phonenum=#{student_phonenum}, 
			student_isurgent=#{student_isurgent}, 
			student_student_grade=#{student_student_grade}, 
			student_subject=#{student_subject}, 
			student_price=#{student_price}, 
			student_available_time=#{student_available_time}, 
			student_available_remote=#{student_available_remote}, 
			student_request=#{student_request}
		where username = #{username}
	</update>
	<!-- 특정 username을 가진 UserStudent 업데이트(전화번호 미변경) -->
	<update id="updateUserStudentByUsernameWithoutPhonenum" parameterType="com.springboot.leestudy.domain.user.Entity.UserStudent">
		update user_student set 
			student_email=#{student_email}, 
			student_isurgent=#{student_isurgent}, 
			student_student_grade=#{student_student_grade}, 
			student_subject=#{student_subject}, 
			student_price=#{student_price}, 
			student_available_time=#{student_available_time}, 
			student_available_remote=#{student_available_remote}, 
			student_request=#{student_request}
		where username = #{username}
	</update>
	<!-- 특정 username을 가진 UserStudent 업데이트-->
	<update id="updateUserTeacherByUsername" parameterType="com.springboot.leestudy.domain.user.Entity.UserTeacher">
		update user_teacher set 
			teacher_email=#{teacher_email}, 
			teacher_phonenum=#{teacher_phonenum}, 
			teacher_introduction=#{teacher_introduction}, 
			teacher_university=#{teacher_university}, 
			teacher_university_isgraduate=#{teacher_university_isgraduate}, 
			teacher_university_major=#{teacher_university_major}, 
			teacher_university_studentnum=#{teacher_university_studentnum}, 
			teacher_price=#{teacher_price}, 
			teacher_detailprice=#{teacher_detailprice}, 
			teacher_personality=#{teacher_personality},
			teacher_available_remote=#{teacher_available_remote},
			teacher_subject=#{teacher_subject},
			teacher_available_time=#{teacher_available_time},
			teacher_teaching_detail=#{teacher_teaching_detail},
			teacher_teaching_style=#{teacher_teaching_style},
			teacher_available_demonstration=#{teacher_available_demonstration}
		where username = #{username}
	</update>
	<!-- 특정 username을 가진 UserTeacher 업데이트(전화번호 미변경) -->
	<update id="updateUserTeacherByUsernameWithoutPhonenum" parameterType="com.springboot.leestudy.domain.user.Entity.UserTeacher">
		update user_teacher set 
			teacher_email=#{teacher_email}, 
			teacher_introduction=#{teacher_introduction}, 
			teacher_university=#{teacher_university}, 
			teacher_university_isgraduate=#{teacher_university_isgraduate}, 
			teacher_university_major=#{teacher_university_major}, 
			teacher_university_studentnum=#{teacher_university_studentnum}, 
			teacher_price=#{teacher_price}, 
			teacher_detailprice=#{teacher_detailprice}, 
			teacher_personality=#{teacher_personality},
			teacher_available_remote=#{teacher_available_remote},
			teacher_subject=#{teacher_subject},
			teacher_available_time=#{teacher_available_time},
			teacher_teaching_detail=#{teacher_teaching_detail},
			teacher_teaching_style=#{teacher_teaching_style},
			teacher_available_demonstration=#{teacher_available_demonstration}
		where username = #{username}
	</update>
	<!-- 회원탈퇴 (UserCommon만 삭제되어도 해당 UserStudent 또는 UserTeacher는 자동 삭제됨 -->
	<delete id="deleteUserCommonByUsername" parameterType="String">
		delete from user_common where username = #{username}
	</delete>
	
	<!-- 회원 수 조회 (파라미터 : role) -->
	<select id="countUserCommonByRole" parameterType="String" resultType="Integer">
		SELECT count(username) FROM user_common where role=#{role}
	</select>
	
	<select id="findTeacherInfoBySearch" parameterType="com.springboot.leestudy.domain.user.Entity.UserTeacherAll" resultType="com.springboot.leestudy.domain.user.Entity.UserTeacherAll">
		SELECT 
			user_common.username,
			nickname, 
			picture,
            ifnull(listReview.cnt,0) as review_count,
			address_part1,
			address_part2,
			gender,
			teacher_subject,
			university_name
		FROM user_common 
        join user_teacher on (user_common.username = user_teacher.username) 
        left outer join list_university on (user_teacher.teacher_university = list_university.university_code)
        left outer join (select review_username_teacher, count(*) as cnt from list_review group by review_username_teacher) as listReview on (user_common.username = listReview.review_username_teacher)
		WHERE 
			address_part1 LIKE '%${address_part1}%' 
			AND address_part2 LIKE '%${address_part2}%' 
			AND teacher_subject LIKE '%${teacher_subject}%' 
			AND teacher_available_remote = #{teacher_available_remote}
			AND gender LIKE '%${gender}%' 
			AND teacher_price LIKE '%${teacher_price}%' 
			AND age LIKE '%${age}%' 
	</select>
	
</mapper>