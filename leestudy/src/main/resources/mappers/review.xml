<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.springboot.leestudy.domain.review.ReviewRepository">
	<!-- 매칭 insert -->
	<insert id="saveReview" parameterType="com.springboot.leestudy.domain.review.Entity.Review" useGeneratedKeys="true" keyProperty="review_code">
  		insert into list_review
  		values(
  			0,
  			#{matching_code},
  			#{teacher_name}, 
  			#{student_name}, 
  			#{matching_startdate}, 
			#{teacher_nickname}, 
			#{teacher_picture}, 
			#{teacher_university}, 
			#{university_name}, 
			#{teacher_university_isgraduate}, 
			#{teacher_university_major}, 
			#{teacher_university_studentnum}, 
			#{teacher_price}, 
			#{teacher_gender}, 
			#{student_nickname}, 
			#{student_picture}, 
			#{student_address_part1}, 
			#{student_address_part2}, 
			#{student_student_grade}, 
			#{review_score_professionality}, 
			#{review_score_readyness}, 
			#{review_score_teaching}, 
			#{review_score_ontime}, 
			#{review_content}, 
			now() 
  			)																																																																																																																										
  	</insert>
  	
  	<select id="findReviewCountByMatchingCode" parameterType="Integer" resultType="Integer" >
  		select count(review_code) from list_review where matching_code = #{matching_code}
  	</select>
  	
  	<select id="findReviewAll" parameterType="com.springboot.leestudy.domain.review.Entity.Review" resultType="com.springboot.leestudy.domain.review.Entity.Review">
  		select 
  			review_code,
  			matching_code,
  			teacher_name,
  			student_name,
  			matching_startdate,
  			teacher_nickname,
  			teacher_picture,
  			teacher_university,
  			university_name,
  			teacher_university_isgraduate,
  			teacher_university_major,
  			teacher_university_studentnum,
  			teacher_price,
  			teacher_gender,
  			student_picture,
  			student_nickname,
  			student_address_part1,
  			student_address_part2,
  			student_student_grade,
  			review_score_professionality,
  			review_score_readyness,
  			review_score_teaching,
  			review_score_ontime,
  			review_content,
  			review_createdate
  		from list_review
  		where
  			student_address_part1 LIKE '%${student_address_part1}%' 
			AND student_address_part2 LIKE '%${student_address_part2}%' 
			AND teacher_name LIKE '%${teacher_name}%' 
			AND student_name LIKE '%${student_name}%' 
		order by review_code desc
  	</select>
  	
  	<select id="findReviewByMatchingCode" parameterType="Integer" resultType="com.springboot.leestudy.domain.review.Entity.Review">
  		select 
  			review_code,
  			matching_code,
  			teacher_name,
  			student_name,
  			matching_startdate,
  			teacher_nickname,
  			teacher_picture,
  			teacher_university,
  			university_name,
  			teacher_university_isgraduate,
  			teacher_university_major,
  			teacher_university_studentnum,
  			teacher_price,
  			teacher_gender,
  			student_picture,
  			student_nickname,
  			student_address_part1,
  			student_address_part2,
  			student_student_grade,
  			review_score_professionality,
  			review_score_readyness,
  			review_score_teaching,
  			review_score_ontime,
  			review_content,
  			review_createdate
  		from list_review
  		where
  			matching_code = #{matching_code}
  		order by review_code desc
  	</select>
  	
  	<!-- findReviewScorePercent 이전에 진행될 sql -->
  	<select id="findReviewCountAll" resultType="Integer" >
  		select count(review_code) from list_review
  	</select>
  	
  	<!-- 고객만족도(리뷰평점 백분율) sql로, findReviewCountAll 결과가 1 이상일때 이 sql실행. -->
  	<select id="findReviewScorePercent" resultType ="Double">
  		select (sum(review_score_ontime)+sum(review_score_teaching)+avg(review_score_professionality)+avg(review_score_readyness)) 
  		/ (5 * (count(review_score_ontime)+count(review_score_teaching)+count(review_score_professionality)+count(review_score_readyness))) 
  		* 100 from list_review;
  	</select>

</mapper>